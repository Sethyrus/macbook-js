// Default breakpoints
$widthBreakpoints: (
  "XL": 1850px,
  "L": 1440px,
  "M": 1024px,
  "S": 720px,
  "XS": 480px,
);
$heightBreakpoints: (
  "XL": 1080px,
  "L": 850px,
  "M": 620px,
  "S": 470px,
  "XS": 350px,
);

// Anchuras por defecto para cada tipo de pantalla
$laptopScreenWidth: 1920px;
$phoneScreenWidth: 260px;

// Aspect ratios por defecto para cada tipo de pantalla (anchura con respecto de la altura)
$laptopScreenWidthAspectRatio: 1.6;
$phoneScreenWidthAspectRatio: 0.45;
$keyboardWidthAspectRatio: 27.25;
$keyboardStandAspectRatio: 0.06;
$cameraWrapWidthAspectRatio: 0.16;
$keyboardHandGripWidthAspectRatio: 0.085;

// Escalas para cada elemento
$screenScales: (
  "DEFAULT": 8/11,
  "XL": 4/7,
  "L": 2/5,
  "M": 2/7,
  "S": 4/21,
  "XS": 2/14,
);
$keyboardScale: 5/4;
$keyboardStandScale: 1/14;
$cameraWrapScale: 1/10;
$cameraScale: 1/23;
$keyboardHandGripScale: 1/7;

// SCREEN
@function screenWidth($breakpoint: "DEFAULT") {
  @return $laptopScreenWidth * map-get($screenScales, $breakpoint);
}
@function screenHeight($breakpoint: "DEFAULT") {
  @return screenWidth($breakpoint) / $laptopScreenWidthAspectRatio;
}

// KEYBOARD
@function keyboardWidth($breakpoint: "DEFAULT") {
  @return screenWidth($breakpoint) * $keyboardScale;
}
@function keyboardHeight($breakpoint: "DEFAULT") {
  @return keyboardWidth($breakpoint) / $keyboardWidthAspectRatio;
}

// CAMERA
@function cameraWrapWidth($breakpoint: "DEFAULT") {
  @return screenWidth($breakpoint) * $cameraWrapScale;
}
@function cameraWrapHeight($breakpoint: "DEFAULT") {
  @return cameraWrapWidth($breakpoint) * $cameraWrapWidthAspectRatio;
}
@function cameraWidth($breakpoint: "DEFAULT") {
  @return cameraWrapWidth($breakpoint) * $cameraScale;
}
@function cameraHeight($breakpoint: "DEFAULT") {
  @return cameraWidth($breakpoint);
}

// KEYBOARD HAND GRIP
@function keyboardHandGripWidth($breakpoint: "DEFAULT") {
  @return keyboardWidth($breakpoint) * $keyboardHandGripScale;
}
@function keyboardHandGripHeight($breakpoint: "DEFAULT") {
  @return keyboardHandGripWidth($breakpoint) * $keyboardHandGripWidthAspectRatio;
}

// KEYBOARD STAND
@function keyboardStandWidth($breakpoint: "DEFAULT") {
  @return keyboardWidth($breakpoint) * $keyboardStandScale;
}
@function keyboardStandHeight($breakpoint: "DEFAULT") {
  @return keyboardStandWidth($breakpoint) * $keyboardStandAspectRatio;
}

// Dimensiones espec√≠ficas sujetas a escalado
@mixin screenFrameDimensions() {
  border-width: screenWidth() / 100;
  border-top-left-radius: screenHeight() / 36.5;
  border-top-right-radius: screenHeight() / 36.5;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      border-width: screenWidth($key) / 100;
      border-top-left-radius: screenHeight($key) / 36.5;
      border-top-right-radius: screenHeight($key) / 36.5;
    }
  }
}

@mixin screenFrameWrapDimensions() {
  margin-bottom: keyboardHeight();
  padding-bottom: screenHeight() / 32;
  border-top-left-radius: screenHeight() / 36.5;
  border-top-right-radius: screenHeight() / 36.5;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      margin-bottom: keyboardHeight($key);
      padding-bottom: screenHeight($key) / 32;
      border-top-left-radius: screenHeight($key) / 36.5;
      border-top-right-radius: screenHeight($key) / 36.5;
    }
  }
}

@mixin cameraWrapDimensions() {
  width: cameraWrapWidth();
  height: cameraWrapHeight();
  border-bottom-left-radius: cameraWrapHeight() / 3;
  border-bottom-right-radius: cameraWrapHeight() / 3;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: cameraWrapWidth($key);
      height: cameraWrapHeight($key);
      border-bottom-left-radius: cameraWrapHeight($key) / 3;
      border-bottom-right-radius: cameraWrapHeight($key) / 3;
    }
  }
}

@mixin cameraDimensions() {
  width: cameraWidth();
  height: cameraHeight();
  margin-top: 1px;
  border-radius: 3px;
  box-shadow: inset 0px 0px 4px #000000;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: cameraWidth($key);
      height: cameraHeight($key);
    }
  }
}

@mixin screenWrapDimensions() {
  width: screenWidth();
  height: screenHeight();

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: screenWidth($key);
      height: screenHeight($key);
    }
  }
}

@mixin screenWrapNoComputerDimensions() {
  border-top-left-radius: screenHeight() / 42;
  border-top-right-radius: screenHeight() / 42;
  width: calc(100vw - ((#{screenWidth()} / 100) * 2));
  height: calc(100vh - ((#{screenWidth()} / 100) * 2));

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      border-top-left-radius: screenHeight($key) / 42;
      border-top-right-radius: screenHeight($key) / 42;
      width: calc(100vw - ((#{screenWidth($key)} / 100) * 2));
      height: calc(100vh - ((#{screenWidth($key)} / 100) * 2));
    }
  }
}

@mixin keyboardWrapDimensions() {
  width: keyboardWidth();
  height: keyboardHeight();
  border-bottom-left-radius: screenHeight() / 36.5;
  border-bottom-right-radius: screenHeight() / 36.5;
  box-shadow: inset 0 -6px 10px 2px #dddddd;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: keyboardWidth($key);
      height: keyboardHeight($key);
      border-bottom-left-radius: screenHeight($key) / 36.5;
      border-bottom-right-radius: screenHeight($key) / 36.5;
    }
  }
}

@mixin keyboardStandDimensions() {
  width: keyboardStandWidth();
  height: keyboardStandHeight();

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: keyboardStandWidth($key);
      height: keyboardStandHeight($key);
    }
  }
}

@mixin keyboardHandGripDimensions() {
  width: keyboardHandGripWidth();
  height: keyboardHandGripHeight();
  border-bottom-left-radius: keyboardHandGripHeight();
  border-bottom-right-radius: keyboardHandGripHeight();

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      width: keyboardHandGripWidth($key);
      height: keyboardHandGripHeight($key);
      border-bottom-left-radius: keyboardHandGripHeight($key);
      border-bottom-right-radius: keyboardHandGripHeight($key);
    }
  }
}

@mixin toggleFullScreenButtonDimensions() {
  top: screenWidth() / 100;
  right: screenWidth() / 100;

  @each $key, $value in $widthBreakpoints {
    @media screen and (max-width: $value),
      screen and (max-height: map-get($heightBreakpoints, $key)) {
      top: screenWidth($key) / 100;
      right: screenWidth($key) / 100;
    }
  }
}

// Other mixins

@mixin generalBgImageProps() {
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}

@mixin generalTransition() {
  transition: calc(1s * 1/3) all ease-in;
}